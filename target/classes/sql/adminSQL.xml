<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="admin">

	<!-- 카풀 전체 카운트 -->
	<select id="getCarpoolCount" resultType="int">
	<![CDATA[
		select count(*) from (select rownum r, c.carpoolnum ,c.driverid "DRIVER", c.depart, c.destination, c.time,  c.maxpassenger, c.passengercount, c.tags, c.price, c.carmatching, c.reg "CARPOOLREG" 
		from carpoollist c) a left outer join reservations r on a.carpoolnum = r.carpoolnum
	]]>
	</select>

	<!-- 카풀 검색 리스트 카운트 -->
	<select id="getsearchCount" parameterType="hashmap" resultType="int">
	<![CDATA[
		select count(*) from (select rownum r, d.* from (select a.*, r.passenger, r.message, r.acceptance "ACCEPTANCE",r.reg "RESERVERREG" from (select c.carpoolnum ,c.driverid "DRIVER", c.depart, c.destination, c.time,  c.maxpassenger, c.passengercount, c.tags, c.price, c.carmatching, c.reg "CARPOOLREG" 
		from carpoollist c) a left outer join reservations r on a.carpoolnum = r.carpoolnum) d where ${sel2} LIKE '%${search}%')
	]]>
	</select>
	
<!-- 카풀 리스트 내역 불러오기
select c.driverid "driver", r.passenger, c.depart, c.destination, c.time, r.message,  c.maxpassenger, c.passengercount, c.tags, c.price, c.carmatching, c.reg "carpoolreg", r.reg "reservereg" 
from carpoollist c left outer join reservations r on c.carpoolnum = r.carpoolnum; -->
	<select id="carpoolLookup" parameterType="hashmap" resultType="carlookDTO">
	<![CDATA[
		select * from (select rownum r, d.* from (select a.*, r.passenger, r.message, r.acceptance "ACCEPTANCE",r.reg "RESERVERREG" from (select c.carpoolnum ,c.driverid "DRIVER", c.depart, c.destination, c.time,  c.maxpassenger, c.passengercount, c.tags, c.price, c.carmatching, c.reg "CARPOOLREG" 
		from carpoollist c) a left outer join reservations r on a.carpoolnum = r.carpoolnum) d ) where r>=#{startRow} and r<=#{endRow} order by time desc
	]]>
	</select>
	
	<!-- 카풀 검색 -->
	<select id="carpoolSearch" parameterType="hashmap" resultType="carlookDTO">
	<![CDATA[
		select * from (select rownum r, d.* from (select a.*, r.passenger, r.message, r.acceptance "ACCEPTANCE",r.reg "RESERVERREG" from (select c.carpoolnum ,c.driverid "DRIVER", c.depart, c.destination, c.time,  c.maxpassenger, c.passengercount, c.tags, c.price, c.carmatching, c.reg "CARPOOLREG" 
		from carpoollist c) a left outer join reservations r on a.carpoolnum = r.carpoolnum) d where ${sel2} LIKE '%${search}%') where (r>=#{startRow} and r<=#{endRow}) order by time desc
	]]>
	</select>

<!-- 운전자 환급 내역
select c.carpoolnum, c.time, c.driverid, u.bankno, c.maxpassenger, c.passengercount, c.price, c.price*c.passengercount "refund", c.depart, c.destinaion
from carpoollist c, users u where c.time <= TO_CHAR(sysdate, 'yy-MM-dd HH:mm:ss') and u.id = c.driverid and c.passengercount > 0;
오늘 날짜 이전 날짜 검색 users id랑 carpoollist driverid랑 같은 애 탑승자 1명이상
환급을 받았는지 안받았는지 확인할 수 있는 방법이 없음 그냥 임의로 관리자가 환급버튼 눌러주면 버튼 text 환급완료로 바꿔줄건지 아니면 컬럼 따로 추가해서 관리할건지 -->
	<!-- 환급 전채 개수 조회 -->
	<select id="getrefundCount" resultType="int">
	<![CDATA[
		select count(*) from (select c.carpoolnum, c.time, c.driverid, u.bankno, c.maxpassenger, c.passengercount, c.price, c.price*c.passengercount "refund", c.depart, c.destination, c.refundcheck
		from carpoollist c, users u	where c.time <= TO_CHAR(sysdate, 'yy-MM-dd HH:mm:ss') and u.nickname = c.driverid and c.passengercount > 0)
	]]>
	</select>
	<!-- 환급 검색 개수 조회 -->
	<select id="getrefundSaerchCount" parameterType="hashmap" resultType="int">
	<![CDATA[
		select count(*) from (select c.carpoolnum, c.time, c.driverid, u.bankno, c.maxpassenger, c.passengercount, c.price, c.price*c.passengercount "refund", c.depart, c.destination, c.refundcheck
		from carpoollist c, users u	where c.time <= TO_CHAR(sysdate, 'yy-MM-dd HH:mm:ss') and u.nickname = c.driverid and c.passengercount > 0) a where a.${sel2} like '%${search}%'
	]]>
	</select>
	<!-- 검색 리스트 조회 -->
	<select id="refundSearch" parameterType="hashmap" resultType="refundDTO">
	<![CDATA[
		select a.*, r from (select rownum r ,c.carpoolnum, c.time, c.driverid, u.bankno, c.maxpassenger, c.passengercount, c.price, c.price*c.passengercount "refund", c.depart, c.destination, c.refundcheck
		from carpoollist c, users u	where c.time <= TO_CHAR(sysdate, 'yy-MM-dd HH:mm:ss') and u.nickname = c.driverid and c.passengercount > 0) a 
		where a.${sel2} like '%${search}%' and ( r>=#{startRow} and r<=#{endRow}) order by a.time desc
	]]>
	</select>
	<select id="refundLookup" parameterType="hashmap" resultType="refundDTO">
	
		<if test="sel eq 'time'">
		<![CDATA[
		select a.*, r from(select rownum r, c.carpoolnum, c.time, c.driverid, u.bankno, c.maxpassenger, c.passengercount, c.price, c.price*c.passengercount "refund", c.depart, c.destination, c.refundcheck
		from carpoollist c, users u	where c.time <= TO_CHAR(sysdate, 'yy-MM-dd HH:mm:ss') and u.nickname = c.driverid and c.passengercount > 0 order by c.time ${sort}) a where r>=#{startRow} and r<=#{endRow}
		]]>
		</if>
		
		<if test="sel neq 'time'">
		<![CDATA[
		select a.*, r from(select rownum r, c.carpoolnum, c.time, c.driverid, u.bankno, c.maxpassenger, c.passengercount, c.price, c.price*c.passengercount "refund", c.depart, c.destination, c.refundcheck
		from carpoollist c, users u	where c.time <= TO_CHAR(sysdate, 'yy-MM-dd HH:mm:ss') and u.nickname = c.driverid and c.passengercount > 0 order by c.time asc) a 
		where a.${sel}=${sort} and (r>=#{startRow} and r<=#{endRow})
		]]>
		</if>
	</select>
	
	<!-- 신고 목록 있는지 없는지 -->
	<select id="getReportsCount" resultType="int">
		select count(*) from reports
	</select>
	
	<!-- 신고 검색 카운트  -->
	<select id="getReportsSearchCount" resultType="int">
		select count(*) from (select x.*, z.id as id1, q.id as id2 from (select c.*, NVL(resultCount,0) as resultCount, rownum r from (select b.*, a.reportCount from reports b, (select id, count(*) as reportCount from reports group by id) a where b.id=a.id  order by b.reg desc) c
      left outer join (select id, count(*) as resultCount from reports where result=2 group by id) e on c.id=e.id order by c.reg desc) x 
      inner join users z on x.reportid=z.nickname inner join users q on x.id=q.nickname) where ${sel2} LIKE '%${search}%'
	</select>
	
	<!-- 신고목록 조회 -->
	<select id="reportsLookup" parameterType="hashmap" resultType="reportDTO">
	
	<if test="sel == reg">
	<![CDATA[
		select x.*, z.id as id1, q.id as id2 from (select c.*, NVL(resultCount,0) as resultCount, rownum r from (select b.*, a.reportCount from reports b, (select id, count(*) as reportCount from reports group by id) a where b.id=a.id  order by b.reg ${sort}) c
      left outer join (select id, count(*) as resultCount from reports where result=2 group by id) e on c.id=e.id order by c.reg ${sort}) x 
      inner join users z on x.reportid=z.nickname inner join users q on x.id=q.nickname where x.r>=#{startRow} and x.r<=#{endRow}
	]]>
	</if>
	<if test="sel != reg">
	<![CDATA[
		select x.*, z.id as id1, q.id as id2 from (select c.*, NVL(resultCount,0) as resultCount, rownum r from (select b.*, a.reportCount from reports b, (select id, count(*) as reportCount from reports group by id) a where b.id=a.id  order by ${sel} ${sort}) c
      left outer join (select id, count(*) as resultCount from reports where result=2 group by id) e on c.id=e.id order by c.${sel} ${sort}) x 
       inner join users z on x.reportid=z.nickname inner join users q on x.id=q.nickname where x.r>=#{startRow} and x.r<=#{endRow}
	]]>
	</if>
	</select>
	
	<!-- 관리자 신고대상 처리 -->
	<update id="reportResult" parameterType="hashmap">
		update reports set 
		<choose>
			<when test="result == 1">result = 1</when>
			<when test="result == 2">result = 2</when>
			<when test="result == 3">result = 3</when>
		</choose>
		where reportid=#{reportId} and id=#{Id}
	</update>
	
	<!-- 검색 -->
	<select id="reportSearch" parameterType="hashmap" resultType="reportDTO">
	<![CDATA[
	select x.*, z.id as id1, q.id as id2 from (select c.*, NVL(resultCount,0) as resultCount, rownum r from (select b.*, a.reportCount from reports b, (select id, count(*) as reportCount from reports group by id) a where b.id=a.id  order by b.reg desc) c
      left outer join (select id, count(*) as resultCount from reports where result=2 group by id) e on c.id=e.id order by c.reg desc) x 
      inner join users z on x.reportid=z.nickname inner join users q on x.id=q.nickname where x.${sel2} LIKE '%${search}%' and (x.r>=#{startRow} and x.r<=#{endRow})
	]]>
	</select>
	
	<!-- (유찬)공지사항 개수 -->
	<select id="getInfoBoardCount" resultType="int">
		select count(*) from infoboard
	</select>
	
	<!-- (유찬)공지사항 -->
	<select id="getInfoBoard" parameterType="hashmap" resultType="infoboardDTO">
	<![CDATA[
		select b.* from (select a.*, rownum r from (select * from infoboard order by reg desc) a order by reg desc) b where b.r>=#{startRow} and b.r<=#{endRow}
	]]>
	</select>
	
	<!-- (유찬)공지사항 content -->
	<select id="getInfoContent" parameterType="int" resultType="infoboardDTO">
		select * from infoboard where num=#{value}
	</select>
	
	<!-- (유찬)content 클릭시 조회수 update -->
	<update id="updatHit" parameterType="int">
		update infoboard set hit=hit+1 where num=#{value}
	</update>
	
	<!-- (유찬)공지사항 add -->
	<insert id="addInfo" parameterType="infoboardDTO">
		insert into infoboard values(infoboard_seq.nextVal,#{writer},#{title},#{content},0,sysdate)
	</insert>
	
	<!-- (유찬)공지사항 update -->
	<update id="updateInfo" parameterType="infoboardDTO">
		update infoboard set title=#{title}, content=#{content}, reg=sysdate where num=#{num}
	</update>
	
	<!-- (유찬)공지사항 delete -->
	<delete id="deleteInfo" parameterType="int">
		delete from infoboard where num=#{value}
	</delete>

	<!-- 회원목록 카운트 혜선-->
	<select id="getMemberInfoCount" resultType="int">
		select count(*) from users
	</select>
	
	<!--관리자 회원목록 페이지 해당 데이터 출력	혜선-->
	<select id="memberInfo" parameterType="hashmap" resultType="memberInfoDTO">
 	 	<if test="sel neq null">
 	 	<![CDATA[
	 		SELECT a.* FROM ( SELECT MIN(rownum) "N", u.ID, MIN(u.nickname) AS "NICKNAME", MIN(u.NAME) AS "NAME", MIN(u.birth) AS "BIRTH", MIN(u.gender) AS "GENDER", MIN(u.permit) AS "PERMIT", MIN(u.active) AS "ACTIVE", MIN(u.userType) AS "USERTYPE", MIN(u.subadmin) AS "SUBADMIN",
		 COUNT(r.ID) AS "reportcount" FROM users u left OUTER JOIN reports r ON u.ID=r.ID GROUP BY u.ID ) a where a.N>=#{startRow} and a.N<=#{endRow} ORDER BY ${sel} ${sort}
	 	]]>
	 	</if>
	 	
	 	<if test="sel eq null">
	 	<![CDATA[
	 		select a.* from (SELECT MIN(rownum) "N", u.ID , MIN(u.nickname) AS "NICKNAME", MIN(u.NAME) AS "NAME", MIN(u.birth) AS "BIRTH", MIN(u.gender) AS "GENDER", MIN(u.permit) AS "PERMIT", MIN(u.active) AS "ACTIVE", MIN(u.userType) AS "USERTYPE", MIN(u.subadmin) AS "SUBADMIN",
		 COUNT(r.ID) AS "reportcount" FROM users u left OUTER JOIN reports r ON u.ID=r.ID GROUP BY u.ID) a where a.N>=#{startRow} and a.N<=#{endRow}
	 	]]>
	 	</if> 
	</select>  
	
	<!-- 회원 목록 검색 카운트(유찬) -->
	 <select id="getMemberSearchCount" parameterType="hashmap" resultType="int">
	 	select count(*) from (SELECT MIN(rownum) "N",u.ID, MIN(u.nickname) AS "NICKNAME", MIN(u.NAME) AS "NAME", MIN(u.birth) AS "BIRTH", MIN(u.gender) AS "GENDER", MIN(u.permit) AS "PERMIT", MIN(u.active) AS "ACTIVE", MIN(u.userType) AS "USERTYPE", MIN(u.subadmin) AS "SUBADMIN",
		 	COUNT(r.ID) AS "reportcount" FROM users u left OUTER JOIN reports r ON u.ID=r.ID where ${sel2} like '%${search}%' GROUP BY u.ID)
	 </select>

	<!-- 회원목록 검색 혜선-->
	<select id="memberInfoSearch" parameterType="hashmap" resultType="memberInfoDTO">
	<![CDATA[
			select a.* from (SELECT Min(rownum) "N",u.ID,MIN(u.nickname) AS "NICKNAME" , MIN(u.NAME) AS "NAME", MIN(u.birth) AS "BIRTH", MIN(u.gender) AS "GENDER", MIN(u.permit) AS "PERMIT", MIN(u.active) AS "ACTIVE", MIN(u.userType) AS "USERTYPE", MIN(u.subadmin) AS "SUBADMIN",
		 	COUNT(r.ID) AS "reportcount" FROM users u left OUTER JOIN reports r ON u.ID=r.ID where ${sel2} like '%${search}%' GROUP BY u.ID) a where a.N>=#{startRow} and a.N<=#{endRow}
	]]>
	</select>

	<!-- qna 목록 카운트 혜선 -->
	<select id="getAdminQnaCount" resultType="int">
		select count(*) from qnaboard
	</select>
	<!-- qna 검색 카운트 -->
	<select id="getAdminQnaSearchCount" parameterType="hashmap" resultType="int">
		select count(*) from qnaboard where ${sel2} like '%${search}%'
	</select>
	<!-- 전체 qna 내용 가져오기  혜선--> 
	<select id="adminQna" parameterType="hashmap" resultType="adminQnaDTO">
 	 	<if test="sel neq null">
 	 	<![CDATA[
			select a.*, r from (select rownum r ,num, reg, qnacate, writer, title, status, reply_writer from qnaboard order by ${sel} ${sort}) a where r>=#{startRow} and r<=#{endRow}
		]]>
	 	</if>
	 	<if test="sel eq null">
	 	<![CDATA[
	 		select a.*, r from (select rownum r ,num, reg, qnacate, writer, title, status, reply_writer from qnaboard) a where r>=#{startRow} and r<=#{endRow}
	 	]]>
	 	</if> 
	</select> 
	
	<!-- qna 검색혜선 -->
	<select id="adminQnaSearch" parameterType="hashmap" resultType="adminQnaDTO">
		<![CDATA[
		select B.*, r from 
			(select A.*, rownum r from 
				(select * from qnaboard where ${sel2} like '%${search}%' 
				 order by num asc) A 
			order by num asc) B
		where r >= #{startRow} and r <= #{endRow}
		]]>
	</select> 

	<!-- qna 답변 content 띄우기 -->
	<select resultType="adminQnaDTO" id="getOneqnaForm" parameterType="int">
		select num, writer, title, content, reg, qnacate from qnaboard where num = #{value} 
	</select>
	
	<!-- qna 답변 저장 update -->
	<update id="writeQnaReply" parameterType="adminQnaDTO">
		update qnaboard set reply_writer='admin', reply_content=#{reply_content}, reply_date=sysdate, status=1where num=#{num} 
	</update>
	
	<!-- 회원정보 subAdminUpdate -->
	<update id="subAdminUpdate" parameterType="hashmap">
		<if test="subAdmin == 0">
			update users set subadmin=1 where id=#{userId}
		</if>
		<if test="subAdmin == 1">
			update users set subadmin=0 where id=#{userId}
		</if>
	</update>

	<!-- 관리자 운전자 승인(민수) -->
	<update id="acceptDriver" parameterType="string">
		update users set permit=2 where nickname=#{nickname}
	</update>
	
	<!-- 관리자 운전자 보류(민수) -->
	<update id="denyDriver" parameterType="string">
		update users set permit=1 where nickname=#{nickname}
	</update>

	
	<!-- 관리자 환급 카풀 조회(민수) -->
	<select id="getCarpoolInfo" parameterType="int" resultType="refundDTO">
	        select carpoolnum, c.time, c.driverid, u.bankno, c.maxpassenger, c.passengercount, c.price, c.price*c.passengercount "refund", c.depart, c.destination, c.refundcheck
		from carpoollist c left join users u on u.id = c.driverid where c.carpoolnum = #{value}
	</select>
	
	<!-- 관리자 환급 처리(민수) -->
	<update id="refundCarpool" parameterType="int">
		update carpoollist set refundcheck = 1  where carpoolnum = #{carpoolum}
	</update>
	

</mapper>